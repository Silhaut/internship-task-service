import { Update, Ctx, On, Start, Hears } from 'nestjs-telegraf';
import { Context } from 'telegraf';
import { PrismaService } from '../prisma/prisma.service';

interface MyContext extends Context {
  session: {
    step?: string;
    firstName?: string;
    lastName?: string;
    phone?: string;
  };
}

@Update()
export class AuthUpdate {
  constructor(private prisma: PrismaService) {}

  @Start()
  async onStart(@Ctx() ctx: MyContext) {
    ctx.session = {};
    ctx.session.step = 'firstName';
    await ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è:');
  }

  @Hears(/.*/)
  async onMessage(@Ctx() ctx: MyContext) {
    const text = ctx.message?.['text'];
    if (!text) return;

    switch (ctx.session.step) {
      case 'firstName':
        ctx.session.firstName = text;
        ctx.session.step = 'lastName';
        await ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é:');
        break;

      case 'lastName':
        ctx.session.lastName = text;
        ctx.session.step = 'phone';
        await ctx.reply('üì± –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', {
          reply_markup: {
            keyboard: [[{ text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact: true }]],
            one_time_keyboard: true,
          },
        });
        break;

      default:
        await ctx.reply('–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª ü§î. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.');
    }
  }

  @On('contact')
  async onContact(@Ctx() ctx: MyContext) {
    const userId = ctx.from?.id;
    if (!userId) return;

    const contact = (ctx.message as any)?.contact;
    const phone = contact?.phone_number;

    const { firstName, lastName } = ctx.session;

    let user = await this.prisma.user.findUnique({
      where: { telegramId: String(userId) },
    });

    if (!user) {
      await this.prisma.user.create({
        data: {
          telegramId: String(userId),
          firstName: firstName ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          lastName: lastName ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
          phone,
          role: 'USER',
        },
      });
      console.log(user)
      await ctx.reply(`‚úÖ –°–ø–∞—Å–∏–±–æ, ${firstName}! –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.`);
    } else {
      await ctx.reply(`üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${firstName || user.firstName}!`);
    }

    ctx.session = {};
  }
}
